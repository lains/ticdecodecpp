/**
 * @file DatasetView.h
 * @brief TIC label decoder
 */
#pragma once
#ifdef __TIC_LIB_USE_STD_STRING__
#include <string>
#endif
#include <stdint.h>

#ifndef ARDUINO
#define STATIC_CONSTEXPR static constexpr
#else
#define STATIC_CONSTEXPR static const
#endif

namespace TIC {
class Horodate {
public:
/* Types */
    /**
     * @brief A season (in TIC terminology): winter/summer period
     */
    typedef enum {
        Unknown = 0, /*!< Unknown, unspecified season */
        Winter, /*!< Winter */
        Summer, /*!< Summer */
        Malformed, /*!< Malformed season data */
    } Season;
/* Constants */
    STATIC_CONSTEXPR unsigned int HORODATE_SIZE = 13; /*!< Size for a horodate tag (in bytes) */

/* Methods */
    Horodate():
    isValid(false),
    season(Season::Unknown),
    degradedTime(true),
    year(0),
    month(0),
    day(0),
    hour(0),
    minute(0),
    second(0) { }

    static Horodate fromLabelBytes(const uint8_t* bytes, unsigned int count);

    /**
     * @brief Make the current horodate go forward a given seconds in time
     * 
     * @param seconds The seconds to add
     * @return true if the result is in the same day as the original value, false otherwise (in that case, the current horodate is *not* modified, calculation in cancelled)
     */
    bool addSeconds(unsigned int seconds);

private:
    /**
     * @brief Comparison of timestamps with another horodate
     * 
     * @param other The other horodate to compare with
     * @return int -1 is we are earlier than @other, 1 if we are later than @other and 0 if both are equal
     * 
     * @note We perform a raw timestamp field comparison, it is up to the caller to deal with metadata or validity (they are not checked)
     */
    int timeStampOnlyCmp(const TIC::Horodate& other) const;

public:
    bool operator==(const Horodate& other) const;
    bool operator!=(const Horodate& other) const;
    bool operator<(const Horodate& other) const;
    bool operator>(const Horodate& other) const;
    bool operator<=(const Horodate& other) const;
    bool operator>=(const Horodate& other) const;

#ifdef __TIC_LIB_USE_STD_STRING__
    std::string toString() const;
#endif

public:
/* Attributes */
    bool isValid; /*!< Does this instance contain a valid horodate? */
    Season season; /*!< The season (in TIC terminology): winter/summer period */
    bool degradedTime; /*!< The horodate was generated by a device with a degraded realtime-clock */
    uint16_t year;
    uint8_t month;
    uint8_t day;
    uint8_t hour;
    uint8_t minute;
    uint8_t second;
};

class DatasetView {
public:
/* Types */
    /**
     * @brief A category resulting of the analysis of a dataset
     */
    typedef enum {
        Malformed = 0, /*!< Malformed dataset */
        WrongCRC, /*!< The CRC for this dataset is incorrect */
        ValidHistorical, /*!< Dataset compliant with historical TIC format (this is the default TIC on meters) */
        ValidStandard, /*!< Dataset compliant with standard TIC format */
    } DatasetType;

/* Constants */
    STATIC_CONSTEXPR uint8_t _HT = 0x09; /*!< Horizontal tab */
    STATIC_CONSTEXPR uint8_t _SP = 0x20; /*!< Space */

/* Methods */
    /**
     * @brief Construct a new TIC::DatasetView object from a dataset buffer
     * 
     * @param datasetBuf A pointer to a byte buffer containing a full dataset
     * @param datasetBufSz The number of valid bytes in @p datasetBuf
     */
    DatasetView(const uint8_t* datasetBuf, unsigned int datasetBufSz);

    /**
     * @brief Does the dataset buffer used at constructor contain a properly formatted dataset?
     * 
     * @return false if the buffer is malformed
     */
    bool isValid() const;

    /**
     * @brief Check if the current data label matches the one provided as argument
     * 
     * @param cString The C-style string to compare to
     * 
     * @return true if the data is valid and matches the provided string
     */
    bool labelEquals(const char* cString) const;

    /**
     * @brief Converts the current data value to an 32-bit unsigned int
     * 
     * @return The decoded unsigned int value, or -1 in case of errors (value does not contain a positive number or dataset is invalid)
     */
    uint32_t dataToUint32() const;


protected:
    /**
     * @brief Compute a TIC label+data CRC
     * 
     * @param[in] bytes The buffer on which to compute the CRC
     * @param count The number of bytes to use in buffer @p bytes
     * 
     * @return An 8-bit TIC CRC
     */
    static uint8_t computeCRC(const uint8_t* bytes, unsigned int count);

public:
    /**
     * @brief Compute a unsigned int value from a dataset value buffer
     * 
     * @param buf A pointer to the dataset value buffer
     * @param cnt The number of digits in @p buf
     * @return The decoded unsigned int value, or -1 in case of errors
     */
    static uint32_t uint32FromValueBuffer(const uint8_t* buf, unsigned int cnt);

/* Attributes */
    DatasetType decodedType;  /*!< What is the resulting type of the parsed dataset? */
    const uint8_t* labelBuffer; /*!< A pointer to the label buffer */
    unsigned int labelSz; /*!< The size of the label in bytes */
    const uint8_t* dataBuffer; /*!< A pointer to the data buffer associated with the label */
    unsigned int dataSz; /*!< The size of the label in bytes */
    Horodate horodate; /*!< The horodate for this dataset */
};
} // namespace TIC

#ifdef __TIC_LIB_USE_STD_STRING__
/* std::to_string() for Horodate */
namespace std {
    std::string to_string(const TIC::Horodate& horodate);
}
#endif
